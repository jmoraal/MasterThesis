simTime = 0.5       # Total simulation time
dt = 0.0005         # Timestep for discretisation (or initial, if adaptive timestep)
adaptiveTime = True # Whether to use adaptive timestep in integrator
PBCs = False        # Whether to work with Periodic Boundary Conditions (i.e. see domain as torus)
reg = 'cutoff'        # Regularisation technique; for now either 'eps', 'V1' (after vMeurs15), 'cutoff' or 'none' (only works when collTres > 0)
eps = 0.01          # Regularisation parameter
cutoff = 50         # Regularisation parameter. Typically, force magnitude is 50 just before annihilation with eps=0.01
randomness = False  # Whether to add random noise to dislocation positions (normal distr.)
sigma = 0.01        # Standard dev. of noise (volatility)
annihilation = True # Whether dislocations disappear from system after collision (under annihilation rules)
collTres = 0.005#e-7    # Collision threshold; if particles are closer than this, they are considered collided. Should be Should be very close to 0 if regularisation is used
stress = 0          # External force (also called 'F'); only a constant in 1D case. Needed for creation in empty system
autoCreation = False # Whether dipoles are introduced automatically according to creation rule (as opposed to explicit time and place specification)
creaProc = 'zero'    # Creation procedure; either 'lin', 'zero' or 'dist' (for linear gamma, zero-gamma or distance creation respectively)
Fnuc = 2    # Threshold for magnitude of Peach-Koehler force 
tnuc = 0.1     # Threshold for duration of PK force magnitude before creation
drag = 1            # Multiplicative factor; only scales time I believe (and possibly external force)
showBackgr = False  # Whether to plot PK force field behind trajectories
domain = (0,1)      # Interval of space where initial dislocations and sources are placed (and possibly PBCs)


initialPositions = np.array([0.00727305, 0.04039581, 0.25157344, 0.2757077 , 0.28350536,
       0.36315111, 0.60467167, 0.68111491, 0.72468363, 0.7442808 ])
b = np.array([-1.,  1., -1., -1.,  1.,  1.,  1., -1.,  1., -1.])
sourceLocs = array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])